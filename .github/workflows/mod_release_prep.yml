name: mod_release_prep

on:
  workflow_call:
    inputs:
      version:
        description: "forge version to be released."
        required: true
        type: "string"
jobs:
  compare-versions:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Decide major or minor version
        id: compare_versions
        run: |
          latest_tag=$(curl -sL https://api.github.com/repos/${GITHUB_REPOSITORY}/tags | jq -r '.[0].name')
          current_version=$(echo "$latest_tag" | cut -d'.' -f1 | sed 's/[^0-9]//g')
          new_version=$(echo "${{ github.event.inputs.version }}" | cut -d'.' -f1 | sed 's/[^0-9]//g')

          if [ "$new_version" -gt "$current_version" ]; then
              echo "major_version_upgrade=true" >> $GITHUB_OUTPUT

              # Cut a new feature branch from main
              git config user.name "$(gh api /users/${GITHUB_ACTOR} | jq .name -r)"
              git config user.email "${GITHUB_ACTOR_ID}+${GITHUB_ACTOR}@users.noreply.github.com"
              git switch -c ${{ github.event.inputs.version }}
              git push origin ${{ github.event.inputs.version }}
              
              # Switch back to the main branch
              git switch main
              git pull origin main
          fi
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      # if the version is not major then checkout current feature branch
      - name: checkout current feature branch
        if: steps.compare_versions.outputs.major_version_upgrade == 'false'
        uses: actions/checkout@v4
        with:
          ref: "v$new_version.0.0"

      - name: "Generate changelog"
        run: |
          export GH_HOST=github.com
          gh extension install chelnak/gh-changelog
          gh changelog new --next-version v${{ github.event.inputs.version }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #- name: "Update .version"
      #  run: |
      #    current_version=$(grep -o "version = '[^']*'" .version | awk -F"'" '{print $2}' | tr -d \n)
      #    # Update version in version.rb, only matching first occurrence
      #    sed -i "0,/$current_version/s//${{ github.event.inputs.version }}/" $(find . -name '.version')
          
      #- name: "Get version"
      #  id: "get_version"
      #  run: |
      #    echo "version=$(grep -o "version = '[^']*'" .version | awk -F"'" '{print $2}' | tr -d \n)" >> $GITHUB_OUTPUT

      #- name: "Check if a release is necessary"
      #  id: "check"
      #  run: |
      #    git diff --quiet CHANGELOG.md && echo "release=false" >> $GITHUB_OUTPUT || echo "release=true" >> $GITHUB_OUTPUT

      - name: "Commit changes"
        if: ${{ steps.check.outputs.release == 'true' }}
        run: |
          git config --local user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Release prep v${{ steps.get_version.outputs.version }}"

      - name: "Create pull Request"
        uses: "peter-evans/create-pull-request@v5"
        if: ${{ steps.check.outputs.release == 'true' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Release prep v${{ steps.get_version.outputs.version }}"
          branch: "release-prep"
          delete-branch: true
          title: "Release prep v${{ steps.get_version.outputs.version }}"
          base: "main"
          body: |
            Automated release of new version
          labels: "maintenance"
