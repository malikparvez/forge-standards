name: release_prep

on:
  workflow_call:
    inputs:
      version:
        description: "forge version to be released."
        required: true
        type: "string"
jobs:
  release_prep:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        
      - name: Decide major or minor version
        id: compare_versions
        run: |
          latest_tag=${{ steps.previoustag.outputs.tag }}
          current_version=$(echo "$latest_tag" | cut -d'.' -f1 | sed 's/[^0-9]//g')
          new_version=$(echo "${{ github.event.inputs.version }}" | cut -d'.' -f1 | sed 's/[^0-9]//g')
          echo "new : $new_version"
          echo "current: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
 
          if [ "$new_version" -gt "$current_version" ]; then
              echo "major_version_upgrade=true" >> $GITHUB_OUTPUT
              echo "base_branch=main" >> $GITHUB_OUTPUT
          else
            echo "major_version_upgrade=false" >> $GITHUB_OUTPUT
            echo "base_branch=$current_version.0.0" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          
       # if the version is not major then checkout current feature branch
      - name: checkout current feature branch
        if: steps.compare_versions.outputs.major_version_upgrade == 'false'
        uses: actions/checkout@v4
        with:
          ref: "${{ steps.compare_versions.outputs.current_version}}.0.0"  
          
      - name: "Generate changelog"
        run: |
          export GH_HOST=github.com
          gh extension install chelnak/gh-changelog
          gh changelog new --next-version v${{ github.event.inputs.version }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: "Cut out a new feature branch for major release"
        if: steps.compare_versions.outputs.major_version_upgrade == 'true'
        run: |
          # Cut a new feature branch from main
          git config --local user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git switch -c ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}        
          
      - name: "Update .version"
        run: |
          current_version=$(grep -o "version = '[^']*'" .version | awk -F"'" '{print $2}' | tr -d \n)
          # Update version in version.rb, only matching first occurrence
          sed -i "0,/$current_version/s//${{ github.event.inputs.version }}/" $(find . -name '.version')
          
      - name: "Get version"
        id: "get_version"
        run: |
          echo "version=$(grep -o "version = '[^']*'" .version | awk -F"'" '{print $2}' | tr -d \n)" >> $GITHUB_OUTPUT

      - name: "Commit changes"
        run: |
          git config --local user.email "${{ github.repository_owner }}@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Release prep v${{ steps.get_version.outputs.version }}"
      

      - name: "Create pull Request"
        uses: "peter-evans/create-pull-request@v5"
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Release prep v${{ github.event.inputs.version }}"
          branch: "release-prep"
          delete-branch: true
          title: "Release prep v${{ github.event.inputs.version }}"
          base: "${{ steps.compare_versions.outputs.base_branch }}"
          body: |
            Automated release of new version
          labels: "maintenance"

